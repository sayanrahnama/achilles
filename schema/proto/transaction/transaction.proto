syntax = "proto3";

package transaction;

option go_package = "github.com/hailsayan/achilles/proto/transaction;transactionpb";

service TransactionService {
  rpc Deposit(DepositRequest) returns (TransactionResponse) {}
  rpc Withdraw(WithdrawRequest) returns (TransactionResponse) {}
  rpc Transfer(TransferRequest) returns (TransactionResponse) {}
  rpc GetTransactionHistory(TransactionHistoryRequest) returns (TransactionHistoryResponse) {}
  rpc GetTransactionById(GetTransactionRequest) returns (TransactionResponse) {}
  rpc RetryTransaction(RetryTransactionRequest) returns (TransactionResponse) {}
  rpc CompensateTransaction(CompensateTransactionRequest) returns (TransactionResponse) {}
}

message DepositRequest {
  string wallet_id = 1;
  double amount = 2;
  string description = 3;
  string idempotency_key = 4; // For preventing duplicate transactions
}

message WithdrawRequest {
  string wallet_id = 1;
  double amount = 2;
  string description = 3;
  string idempotency_key = 4; // For preventing duplicate transactions
}

message TransferRequest {
  string from_wallet_id = 1;
  string to_wallet_id = 2;
  double amount = 3;
  string description = 4;
  string idempotency_key = 5; // For preventing duplicate transactions
}

message TransactionResponse {
  string transaction_id = 1;
  string status = 2; // "pending", "processing", "completed", "failed"
  string message = 3;
  Transaction transaction = 4;
}

message GetTransactionRequest {
  string transaction_id = 1;
}

message RetryTransactionRequest {
  string transaction_id = 1;
}

message CompensateTransactionRequest {
  string transaction_id = 1;
  string reason = 2;
}

message TransactionHistoryRequest {
  string wallet_id = 1;
  int32 page = 2;
  int32 limit = 3;
  string sort_by = 4;
  bool ascending = 5;
  string status_filter = 6; // Optional filter by status
  string type_filter = 7; // Optional filter by transaction type
}

message TransactionHistoryResponse {
  repeated Transaction transactions = 1;
  int32 total_count = 2;
  int32 page = 3;
  int32 total_pages = 4;
}

message Transaction {
  string id = 1;
  string transaction_type = 2; // "deposit", "withdraw", "transfer"
  string source_wallet_id = 3;
  string destination_wallet_id = 4;
  double amount = 5;
  int64 created_at = 6;
  int64 updated_at = 7;
  string status = 8; // "pending", "processing", "completed", "failed"
  string description = 9;
  repeated TransactionEvent events = 10;
  string saga_state = 11; // "STARTED", "WALLET_UPDATED", "NOTIFICATION_SENT", "COMPLETED", "FAILED"
}

message TransactionEvent {
  string id = 1;
  string event_type = 2;
  string details = 3;
  int64 created_at = 4;
}
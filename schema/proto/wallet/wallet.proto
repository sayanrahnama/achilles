syntax = "proto3";

package wallet;

option go_package = "github.com/hailsayan/achilles/proto/wallet;walletpb";

service WalletService {
  rpc CreateWallet(CreateWalletRequest) returns (Wallet);
  rpc GetWalletById(GetWalletRequest) returns (Wallet);
  rpc GetWalletByUserId(GetWalletByUserIdRequest) returns (Wallet);
  rpc UpdateBalance(UpdateBalanceRequest) returns (Wallet);
  rpc RevertBalanceUpdate(RevertBalanceRequest) returns (Wallet);
  rpc HasSufficientBalance(HasSufficientBalanceRequest) returns (HasSufficientBalanceResponse);
  rpc BlockWallet(BlockWalletRequest) returns (Wallet);
  rpc UnblockWallet(UnblockWalletRequest) returns (Wallet);
}

message CreateWalletRequest {
  string user_id = 1;
  double initial_balance = 2;
}

message GetWalletRequest {
  string wallet_id = 1;
}

message GetWalletByUserIdRequest {
  string user_id = 1;
}

message UpdateBalanceRequest {
  string wallet_id = 1;
  double amount = 2; // Positive for credit, negative for debit
  string transaction_id = 3; // Reference to transaction for idempotency
}

message RevertBalanceRequest {
  string wallet_id = 1;
  double amount = 2;
  string original_transaction_id = 3;
  string compensation_transaction_id = 4;
}

message HasSufficientBalanceRequest {
  string wallet_id = 1;
  double amount = 2;
}

message HasSufficientBalanceResponse {
  bool is_sufficient = 1;
  double current_balance = 2;
}

message BlockWalletRequest {
  string wallet_id = 1;
  string reason = 2;
}

message UnblockWalletRequest {
  string wallet_id = 1;
}

message Wallet {
  string id = 1;
  string user_id = 2;
  double balance = 3;
  bool is_blocked = 4;
  string block_reason = 5;
  int64 created_at = 6;
  int64 updated_at = 7;
}
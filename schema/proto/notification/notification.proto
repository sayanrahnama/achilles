syntax = "proto3";

package notification;

option go_package = "github.com/hailsayan/achilles/proto/notification;notificationpb";

service NotificationService {
  rpc SendNotification(SendNotificationRequest) returns (SendNotificationResponse) {}
  rpc CancelNotification(CancelNotificationRequest) returns (CancelNotificationResponse) {} // برای عملیات جبرانی
  rpc GetUserNotifications(GetUserNotificationsRequest) returns (GetUserNotificationsResponse) {}
  rpc MarkAsRead(MarkAsReadRequest) returns (MarkAsReadResponse) {}
  rpc SubscribeToNotifications(SubscribeToNotificationsRequest) returns (stream Notification) {}
}

message SendNotificationRequest {
  string user_id = 1;
  string title = 2;
  string content = 3;
  string notification_type = 4; // "transaction", "system", "marketing", etc.
  string reference_id = 5; // For example, transaction ID if related to a transaction
  map<string, string> metadata = 6; // Additional data
}

message SendNotificationResponse {
  string notification_id = 1;
  bool success = 2;
  string message = 3;
}

message CancelNotificationRequest {
  string notification_id = 1;
  string reason = 2;
}

message CancelNotificationResponse {
  bool success = 1;
  string message = 2;
}

message GetUserNotificationsRequest {
  string user_id = 1;
  int32 page = 2;
  int32 limit = 3;
  bool unread_only = 4;
  string type_filter = 5; // Optional filter by notification type
}

message GetUserNotificationsResponse {
  repeated Notification notifications = 1;
  int32 total_count = 2;
  int32 unread_count = 3;
}

message MarkAsReadRequest {
  string notification_id = 1;
  string user_id = 2;
}

message MarkAsReadResponse {
  bool success = 1;
}

message SubscribeToNotificationsRequest {
  string user_id = 1;
}

message Notification {
  string id = 1;
  string user_id = 2;
  string title = 3;
  string content = 4;
  string notification_type = 5;
  string reference_id = 6;
  bool is_read = 7;
  int64 created_at = 8;
  int64 read_at = 9;
  map<string, string> metadata = 10;
}
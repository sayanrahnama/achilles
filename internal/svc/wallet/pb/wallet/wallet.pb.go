// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.19.6
// source: wallet/wallet.proto

package walletpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateWalletRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UserId         string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InitialBalance float64                `protobuf:"fixed64,2,opt,name=initial_balance,json=initialBalance,proto3" json:"initial_balance,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateWalletRequest) Reset() {
	*x = CreateWalletRequest{}
	mi := &file_wallet_wallet_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletRequest) ProtoMessage() {}

func (x *CreateWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletRequest.ProtoReflect.Descriptor instead.
func (*CreateWalletRequest) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{0}
}

func (x *CreateWalletRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateWalletRequest) GetInitialBalance() float64 {
	if x != nil {
		return x.InitialBalance
	}
	return 0
}

type GetWalletRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WalletId      string                 `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWalletRequest) Reset() {
	*x = GetWalletRequest{}
	mi := &file_wallet_wallet_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletRequest) ProtoMessage() {}

func (x *GetWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletRequest.ProtoReflect.Descriptor instead.
func (*GetWalletRequest) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{1}
}

func (x *GetWalletRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type GetWalletByUserIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWalletByUserIdRequest) Reset() {
	*x = GetWalletByUserIdRequest{}
	mi := &file_wallet_wallet_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWalletByUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletByUserIdRequest) ProtoMessage() {}

func (x *GetWalletByUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletByUserIdRequest.ProtoReflect.Descriptor instead.
func (*GetWalletByUserIdRequest) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{2}
}

func (x *GetWalletByUserIdRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UpdateBalanceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WalletId      string                 `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Amount        float64                `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`                                  // Positive for credit, negative for debit
	TransactionId string                 `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"` // Reference to transaction for idempotency
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBalanceRequest) Reset() {
	*x = UpdateBalanceRequest{}
	mi := &file_wallet_wallet_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBalanceRequest) ProtoMessage() {}

func (x *UpdateBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBalanceRequest.ProtoReflect.Descriptor instead.
func (*UpdateBalanceRequest) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateBalanceRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *UpdateBalanceRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UpdateBalanceRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type RevertBalanceRequest struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	WalletId                  string                 `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Amount                    float64                `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
	OriginalTransactionId     string                 `protobuf:"bytes,3,opt,name=original_transaction_id,json=originalTransactionId,proto3" json:"original_transaction_id,omitempty"`
	CompensationTransactionId string                 `protobuf:"bytes,4,opt,name=compensation_transaction_id,json=compensationTransactionId,proto3" json:"compensation_transaction_id,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *RevertBalanceRequest) Reset() {
	*x = RevertBalanceRequest{}
	mi := &file_wallet_wallet_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevertBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertBalanceRequest) ProtoMessage() {}

func (x *RevertBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertBalanceRequest.ProtoReflect.Descriptor instead.
func (*RevertBalanceRequest) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{4}
}

func (x *RevertBalanceRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *RevertBalanceRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RevertBalanceRequest) GetOriginalTransactionId() string {
	if x != nil {
		return x.OriginalTransactionId
	}
	return ""
}

func (x *RevertBalanceRequest) GetCompensationTransactionId() string {
	if x != nil {
		return x.CompensationTransactionId
	}
	return ""
}

type HasSufficientBalanceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WalletId      string                 `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Amount        float64                `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HasSufficientBalanceRequest) Reset() {
	*x = HasSufficientBalanceRequest{}
	mi := &file_wallet_wallet_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HasSufficientBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasSufficientBalanceRequest) ProtoMessage() {}

func (x *HasSufficientBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasSufficientBalanceRequest.ProtoReflect.Descriptor instead.
func (*HasSufficientBalanceRequest) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{5}
}

func (x *HasSufficientBalanceRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *HasSufficientBalanceRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type HasSufficientBalanceResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	IsSufficient   bool                   `protobuf:"varint,1,opt,name=is_sufficient,json=isSufficient,proto3" json:"is_sufficient,omitempty"`
	CurrentBalance float64                `protobuf:"fixed64,2,opt,name=current_balance,json=currentBalance,proto3" json:"current_balance,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HasSufficientBalanceResponse) Reset() {
	*x = HasSufficientBalanceResponse{}
	mi := &file_wallet_wallet_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HasSufficientBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasSufficientBalanceResponse) ProtoMessage() {}

func (x *HasSufficientBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasSufficientBalanceResponse.ProtoReflect.Descriptor instead.
func (*HasSufficientBalanceResponse) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{6}
}

func (x *HasSufficientBalanceResponse) GetIsSufficient() bool {
	if x != nil {
		return x.IsSufficient
	}
	return false
}

func (x *HasSufficientBalanceResponse) GetCurrentBalance() float64 {
	if x != nil {
		return x.CurrentBalance
	}
	return 0
}

type BlockWalletRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WalletId      string                 `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockWalletRequest) Reset() {
	*x = BlockWalletRequest{}
	mi := &file_wallet_wallet_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockWalletRequest) ProtoMessage() {}

func (x *BlockWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockWalletRequest.ProtoReflect.Descriptor instead.
func (*BlockWalletRequest) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{7}
}

func (x *BlockWalletRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *BlockWalletRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type UnblockWalletRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WalletId      string                 `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnblockWalletRequest) Reset() {
	*x = UnblockWalletRequest{}
	mi := &file_wallet_wallet_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnblockWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockWalletRequest) ProtoMessage() {}

func (x *UnblockWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockWalletRequest.ProtoReflect.Descriptor instead.
func (*UnblockWalletRequest) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{8}
}

func (x *UnblockWalletRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type Wallet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Balance       float64                `protobuf:"fixed64,3,opt,name=balance,proto3" json:"balance,omitempty"`
	IsBlocked     bool                   `protobuf:"varint,4,opt,name=is_blocked,json=isBlocked,proto3" json:"is_blocked,omitempty"`
	BlockReason   string                 `protobuf:"bytes,5,opt,name=block_reason,json=blockReason,proto3" json:"block_reason,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     int64                  `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Wallet) Reset() {
	*x = Wallet{}
	mi := &file_wallet_wallet_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Wallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wallet) ProtoMessage() {}

func (x *Wallet) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wallet.ProtoReflect.Descriptor instead.
func (*Wallet) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{9}
}

func (x *Wallet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Wallet) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Wallet) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Wallet) GetIsBlocked() bool {
	if x != nil {
		return x.IsBlocked
	}
	return false
}

func (x *Wallet) GetBlockReason() string {
	if x != nil {
		return x.BlockReason
	}
	return ""
}

func (x *Wallet) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Wallet) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

var File_wallet_wallet_proto protoreflect.FileDescriptor

const file_wallet_wallet_proto_rawDesc = "" +
	"\n" +
	"\x13wallet/wallet.proto\x12\x06wallet\"W\n" +
	"\x13CreateWalletRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12'\n" +
	"\x0finitial_balance\x18\x02 \x01(\x01R\x0einitialBalance\"/\n" +
	"\x10GetWalletRequest\x12\x1b\n" +
	"\twallet_id\x18\x01 \x01(\tR\bwalletId\"3\n" +
	"\x18GetWalletByUserIdRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\"r\n" +
	"\x14UpdateBalanceRequest\x12\x1b\n" +
	"\twallet_id\x18\x01 \x01(\tR\bwalletId\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\x01R\x06amount\x12%\n" +
	"\x0etransaction_id\x18\x03 \x01(\tR\rtransactionId\"\xc3\x01\n" +
	"\x14RevertBalanceRequest\x12\x1b\n" +
	"\twallet_id\x18\x01 \x01(\tR\bwalletId\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\x01R\x06amount\x126\n" +
	"\x17original_transaction_id\x18\x03 \x01(\tR\x15originalTransactionId\x12>\n" +
	"\x1bcompensation_transaction_id\x18\x04 \x01(\tR\x19compensationTransactionId\"R\n" +
	"\x1bHasSufficientBalanceRequest\x12\x1b\n" +
	"\twallet_id\x18\x01 \x01(\tR\bwalletId\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\x01R\x06amount\"l\n" +
	"\x1cHasSufficientBalanceResponse\x12#\n" +
	"\ris_sufficient\x18\x01 \x01(\bR\fisSufficient\x12'\n" +
	"\x0fcurrent_balance\x18\x02 \x01(\x01R\x0ecurrentBalance\"I\n" +
	"\x12BlockWalletRequest\x12\x1b\n" +
	"\twallet_id\x18\x01 \x01(\tR\bwalletId\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\"3\n" +
	"\x14UnblockWalletRequest\x12\x1b\n" +
	"\twallet_id\x18\x01 \x01(\tR\bwalletId\"\xcb\x01\n" +
	"\x06Wallet\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x18\n" +
	"\abalance\x18\x03 \x01(\x01R\abalance\x12\x1d\n" +
	"\n" +
	"is_blocked\x18\x04 \x01(\bR\tisBlocked\x12!\n" +
	"\fblock_reason\x18\x05 \x01(\tR\vblockReason\x12\x1d\n" +
	"\n" +
	"created_at\x18\x06 \x01(\x03R\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\a \x01(\x03R\tupdatedAt2\xaf\x04\n" +
	"\rWalletService\x12;\n" +
	"\fCreateWallet\x12\x1b.wallet.CreateWalletRequest\x1a\x0e.wallet.Wallet\x129\n" +
	"\rGetWalletById\x12\x18.wallet.GetWalletRequest\x1a\x0e.wallet.Wallet\x12E\n" +
	"\x11GetWalletByUserId\x12 .wallet.GetWalletByUserIdRequest\x1a\x0e.wallet.Wallet\x12=\n" +
	"\rUpdateBalance\x12\x1c.wallet.UpdateBalanceRequest\x1a\x0e.wallet.Wallet\x12C\n" +
	"\x13RevertBalanceUpdate\x12\x1c.wallet.RevertBalanceRequest\x1a\x0e.wallet.Wallet\x12a\n" +
	"\x14HasSufficientBalance\x12#.wallet.HasSufficientBalanceRequest\x1a$.wallet.HasSufficientBalanceResponse\x129\n" +
	"\vBlockWallet\x12\x1a.wallet.BlockWalletRequest\x1a\x0e.wallet.Wallet\x12=\n" +
	"\rUnblockWallet\x12\x1c.wallet.UnblockWalletRequest\x1a\x0e.wallet.WalletB5Z3github.com/hailsayan/achilles/proto/wallet;walletpbb\x06proto3"

var (
	file_wallet_wallet_proto_rawDescOnce sync.Once
	file_wallet_wallet_proto_rawDescData []byte
)

func file_wallet_wallet_proto_rawDescGZIP() []byte {
	file_wallet_wallet_proto_rawDescOnce.Do(func() {
		file_wallet_wallet_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_wallet_wallet_proto_rawDesc), len(file_wallet_wallet_proto_rawDesc)))
	})
	return file_wallet_wallet_proto_rawDescData
}

var file_wallet_wallet_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_wallet_wallet_proto_goTypes = []any{
	(*CreateWalletRequest)(nil),          // 0: wallet.CreateWalletRequest
	(*GetWalletRequest)(nil),             // 1: wallet.GetWalletRequest
	(*GetWalletByUserIdRequest)(nil),     // 2: wallet.GetWalletByUserIdRequest
	(*UpdateBalanceRequest)(nil),         // 3: wallet.UpdateBalanceRequest
	(*RevertBalanceRequest)(nil),         // 4: wallet.RevertBalanceRequest
	(*HasSufficientBalanceRequest)(nil),  // 5: wallet.HasSufficientBalanceRequest
	(*HasSufficientBalanceResponse)(nil), // 6: wallet.HasSufficientBalanceResponse
	(*BlockWalletRequest)(nil),           // 7: wallet.BlockWalletRequest
	(*UnblockWalletRequest)(nil),         // 8: wallet.UnblockWalletRequest
	(*Wallet)(nil),                       // 9: wallet.Wallet
}
var file_wallet_wallet_proto_depIdxs = []int32{
	0, // 0: wallet.WalletService.CreateWallet:input_type -> wallet.CreateWalletRequest
	1, // 1: wallet.WalletService.GetWalletById:input_type -> wallet.GetWalletRequest
	2, // 2: wallet.WalletService.GetWalletByUserId:input_type -> wallet.GetWalletByUserIdRequest
	3, // 3: wallet.WalletService.UpdateBalance:input_type -> wallet.UpdateBalanceRequest
	4, // 4: wallet.WalletService.RevertBalanceUpdate:input_type -> wallet.RevertBalanceRequest
	5, // 5: wallet.WalletService.HasSufficientBalance:input_type -> wallet.HasSufficientBalanceRequest
	7, // 6: wallet.WalletService.BlockWallet:input_type -> wallet.BlockWalletRequest
	8, // 7: wallet.WalletService.UnblockWallet:input_type -> wallet.UnblockWalletRequest
	9, // 8: wallet.WalletService.CreateWallet:output_type -> wallet.Wallet
	9, // 9: wallet.WalletService.GetWalletById:output_type -> wallet.Wallet
	9, // 10: wallet.WalletService.GetWalletByUserId:output_type -> wallet.Wallet
	9, // 11: wallet.WalletService.UpdateBalance:output_type -> wallet.Wallet
	9, // 12: wallet.WalletService.RevertBalanceUpdate:output_type -> wallet.Wallet
	6, // 13: wallet.WalletService.HasSufficientBalance:output_type -> wallet.HasSufficientBalanceResponse
	9, // 14: wallet.WalletService.BlockWallet:output_type -> wallet.Wallet
	9, // 15: wallet.WalletService.UnblockWallet:output_type -> wallet.Wallet
	8, // [8:16] is the sub-list for method output_type
	0, // [0:8] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_wallet_wallet_proto_init() }
func file_wallet_wallet_proto_init() {
	if File_wallet_wallet_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wallet_wallet_proto_rawDesc), len(file_wallet_wallet_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wallet_wallet_proto_goTypes,
		DependencyIndexes: file_wallet_wallet_proto_depIdxs,
		MessageInfos:      file_wallet_wallet_proto_msgTypes,
	}.Build()
	File_wallet_wallet_proto = out.File
	file_wallet_wallet_proto_goTypes = nil
	file_wallet_wallet_proto_depIdxs = nil
}
